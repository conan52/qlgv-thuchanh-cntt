@using System.Collections
@using TkbThucHanhCNTT.Models
@using TkbThucHanhCNTT.Models.Enums
@using TkbThucHanhCNTT.Models.Provider
@using TkbThucHanhCNTT.Models.Viewer
@{
    ViewBag.Title = "Thời khóa biểu giảng viên";
}

@(Html.Kendo().Grid<TkbGiangVienViewModel>()
      .Name("GridView")
      .Columns(columns =>
      {
          columns.ForeignKey(c => c.SttTuan, (IEnumerable) ViewData["Tuans"], dataFieldText: "SttTuan", dataFieldValue: "SttTuan").Filterable(false);
          columns.ForeignKey(c => c.NgayTrongTuan, EnumUltils.GetDescriptions<NgayTrongTuan>(), dataFieldText: "Description", dataFieldValue: "Value").Filterable(false);
          columns.Bound(c => c.TietBatDau).Title("Tiết").ClientTemplate("#=TietBatDau# - #=TietKetThuc#").Groupable(false).Filterable(false);
          columns.ForeignKey(c => c.MaGv, (IEnumerable) ViewData["GiangViens"], dataFieldText: "HoVaTen", dataFieldValue: "MaGv").Filterable(true);
          columns.Bound(c => c.TenMonHoc).Groupable(false).Filterable(false);
          columns.Bound(c => c.LopHoc);
          columns.Bound(c => c.Phong).Filterable(false);
          columns.Command(command =>
          {
              command.Edit().CancelText("Hủy bỏ").UpdateText("Cập nhật").Text("Sửa");
              command.Destroy().Text("Xóa");
          });
      })
      .Editable(e =>
      {
          e.Mode(GridEditMode.PopUp);
          e.DisplayDeleteConfirmation("Bạn có chắc chắn xóa dòng này!");
          e.Window(x => x.Title("Thời khóa biểu giảng viên"));
      })
      .Sortable()
      .Filterable(filterable => filterable
          .Extra(false)
          .Operators(operators => operators
              .ForString(str => str.Clear()
                  .StartsWith("Bắt đầu với")
                  .IsEqualTo(("So sánh với"))
                  .Contains("Trong nội dung")
              ))
          .Messages(t =>
          {
              t.Filter("Lọc");
              t.Clear("Hủy");
              t.Info("Lọc kết quả theo!");
          }
          )
      ) 
//      .Filterable(f=>f.Enabled(true))
      .Groupable(x => x.Messages(t => t.Empty("Kéo thả để gom nhóm dữ liệu")))
      .Selectable()
      //  .Scrollable()
      .DataSource(dataSource => dataSource
          .Ajax()
          .Events(events => events.Error("error_handler"))
          .Read(read => read.Action("AjaxReadData", "TkbGiangVien"))
          .Create(update => update.Action("AjaxCreate", "TkbGiangVien"))
          .Update(update => update.Action("AjaxUpdate", "TkbGiangVien"))
          .Destroy(update => update.Action("AjaxDelete", "TkbGiangVien"))
          .Model(model =>
          {
              model.Id(gv => gv.MaGv);
              model.Field(f => f.SttTuan).DefaultValue(DataProvider<TuanHoc>.GetAll().FirstOrDefault(x => (x.NgayBatDau - DateTime.Now).Days < 7 && (x.NgayBatDau - DateTime.Now).Days > 0) != null ? DataProvider<TuanHoc>.GetAll().FirstOrDefault(x => (x.NgayBatDau - DateTime.Now).Days < 7 && (x.NgayBatDau - DateTime.Now).Days > 0).SttTuan : 0);
              model.Field(x => x.MaGv).DefaultValue(DataProvider<GiangVien>.GetAll().FirstOrDefault() != null ? DataProvider<GiangVien>.GetAll().FirstOrDefault().MaGv : null);
              if (DateTime.Now.TimeOfDay.Hours < 12)
              {
                  model.Field(x => x.TietBatDau).DefaultValue(1);
                  model.Field(x => x.TietKetThuc).DefaultValue(4);
              }
              else
              {
                  model.Field(x => x.TietBatDau).DefaultValue(7);
                  model.Field(x => x.TietKetThuc).DefaultValue(10);
              }
          })
      ).ToolBar(toolBar =>
      {
          toolBar.Template(@<text>
                                @item.CreateButton("Thêm mới")
                                <a id='btnAutoGet' class='k-button k-button-icontext' href='#'><span class='k-icon k-add'>
                                                                                               </span>Lấy tự động từ TKB trường</a>
                                <div class="toolbar">
                                    <label class="category-label" for="category">
                                        Xem theo tuần:</label>
                                    @(Html.Kendo().DropDownList()
                                          .Name("DanhSachTuan")
                                          .Events(e => e.Change("onSelectedWeekChange"))
                                          .DataSource(ds => ds.Read("LayDsTuan", "TkbGiangVien"))
                                          .Value(ViewData["TuanGanNhat"].ToString()))
                                </div>
                            </text>);
      })
      .Events(builder =>
      {
          builder.SaveChanges("SaveChanges");
          builder.Save("SaveChanges");
      }))
<style>
    .category-label {
        padding-right: .5em;
        vertical-align: middle;
    }

    #category { vertical-align: middle; }

    .toolbar { float: right; }
</style>
<script type="text/javascript">
    function SaveChanges(e) {

        setTimeout(ReloadDropdownlist, 500);
    }

    function ReloadDropdownlist() {
        $("#DanhSachTuan").data("kendoDropDownList").dataSource.read();

    }


    function refreshData() {
        $('#GridView').data('kendoGrid').dataSource.read();
        $('#GridView').data('kendoGrid').refresh();
    }

    $("#btnAutoGet").bind("click", function() {
        showLoadingDialog();
        $.post("@Url.Action("LayTkbTuDong", "TkbGiangVien")")
            .done(function(data) {
                hideLoadingDialog();
                if (data.Result == "OK") {
                    ShowNotification("Đã thêm <b>" + data.Message + "</b> buổi học từ website trường!", "info");
                    refreshData();
                    $("#DanhSachTuan").data("kendoDropDownList").dataSource.read();
                } else
                    ShowNotification(data.Message, "error");

            });
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function onSelectedWeekChange() {
        var value = this.value(),
            grid = $("#GridView").data("kendoGrid");
        if (value && !isNaN(parseInt(value))) {
            grid.dataSource.filter({ field: "SttTuan", operator: "eq", value: parseInt(value) });
        } else {
            grid.dataSource.filter({});
        }
    }

</script>