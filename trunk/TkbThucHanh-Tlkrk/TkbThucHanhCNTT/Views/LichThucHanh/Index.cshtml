@using System.Collections
@using TkbThucHanhCNTT.Models
@using TkbThucHanhCNTT.Models.Enums
@{
    ViewBag.Title = "Index";
}

@(Html.Kendo().Grid<LichThucHanh>()
      .Name("GridView")
      .Columns(columns =>
      {
          columns.ForeignKey(c => c.SttTuan, (IEnumerable) ViewData["Tuans"], dataFieldText: "SttTuan", dataFieldValue: "SttTuan").Filterable(false).Width(25);
          columns.ForeignKey(c => c.NgayTrongTuan, EnumUltils.GetDescriptions<NgayTrongTuan>(), dataFieldText: "Description", dataFieldValue: "Value").Filterable(false).Width(85);
          columns.Bound(e => e.TietBatDau).HeaderHtmlAttributes(new {colspan = 2}).Title("Tiết học").Width(15);
          columns.Bound(e => e.TietKetThuc).HeaderHtmlAttributes(new {style = "display:none;"}).Width(15);
          columns.ForeignKey(c => c.TenLop, (IEnumerable) ViewData["Lops"], dataFieldText: "TenLop", dataFieldValue: "TenLop").Filterable(false);
          columns.ForeignKey(c => c.TenPhong, (IEnumerable) ViewData["Phongs"], dataFieldText: "TenPhong", dataFieldValue: "TenPhong").Filterable(false);

          // columns.ForeignKey(p => p.MonHocId, Model.MonHocs, "MonHocId", "TenThucHanh").EditorTemplateName("MonHocId");
          columns.ForeignKey(c => c.MonHocId, (IEnumerable) ViewData["MonHocs"], dataFieldText: "TenThucHanh", dataFieldValue: "MonHocId").EditorTemplateName("MonHocId");
          columns.ForeignKey(c => c.Gvhd1, (IEnumerable) ViewData["GiangViens"], dataFieldText: "HoVaTen", dataFieldValue: "MaGv").EditorTemplateName("MaGvHd1");
          columns.ForeignKey(c => c.Gvhd2, (IEnumerable) ViewData["GiangViens"], dataFieldText: "HoVaTen", dataFieldValue: "MaGv").EditorTemplateName("MaGvHd2");
          columns.ForeignKey(c => c.Gvhd3, (IEnumerable) ViewData["GiangViens"], dataFieldText: "HoVaTen", dataFieldValue: "MaGv").EditorTemplateName("MaGv");

          columns.Bound(e => e.Vang);
          columns.Bound(e => e.GhiChu);

          columns.Command(command => { command.Destroy().Text("Xóa"); });
      })
      .Editable(e => e.Mode(GridEditMode.InCell))
      .Sortable()
      // .Selectable()
      .Groupable(x => x.Messages(t => t.Empty("Kéo thả để gom nhóm dữ liệu")))
      //  .Selectable()
      //  .Scrollable()
      .DataSource(dataSource => dataSource
          .Ajax()
          .Batch(true)
          .Events(events =>
          {
              events.Error("error_handler");
              events.Change("onChange");
          })
          .Read(read => read.Action("AjaxReadData", "LichThucHanh"))
          .Create(update => update.Action("AjaxCreate", "LichThucHanh"))
          .Update(update => update.Action("AjaxUpdate", "LichThucHanh"))
          .Destroy(update => update.Action("AjaxDelete", "LichThucHanh"))
          .Model(model =>
          {
              model.Id(t => t.MaLichTh);
              model.Field(t => t.SttTuan).DefaultValue((int) ViewData["TuanMoiNhat"]);
              model.Field(t => t.SttTuan).DefaultValue((int) ViewData["TuanMoiNhat"]);
              model.Field(t => t.SttTuan).DefaultValue((int) ViewData["TuanMoiNhat"]);
              model.Field(t => t.TietBatDau).DefaultValue(1);
              model.Field(t => t.MonHocId).DefaultValue(1);
              model.Field(t => t.TietKetThuc).DefaultValue(1);
          })
      ).ToolBar(toolBar =>
      {
          toolBar.Template(@<text>
                                @item.CreateButton("Thêm mới")
                                @item.SaveButton("Lưu lại", "Hủy bỏ")
                                <a id='btnAutoGet' class='k-button k-button-icontext' href='#'><span class='k-icon k-add'>
                                                                                               </span>Lấy tự động từ TKB trường</a>
                                <div class="toolbar">
                                    <label class="category-label" for="category">
                                        Xem theo tuần:</label>
                                    @(Html.Kendo().DropDownList()
                                          .Name("DanhSachTuan")
                                          .OptionLabel("Tất cả")
                                          .AutoBind(false)
                                          .Events(e => e.Change("onSelectedWeekChange"))
                                          .DataSource(ds => ds.Read("LayDsTuan", "LichThucHanh"))
                                          )
                                </div>
                            </text>);
      })
      )
<style>

    .toolbar { float: right; }
</style>
<script src="@Url.Content("~/Scripts/itdlu/lichthcascade.js")"></script>
<script type="text/javascript">

    function refreshData() {
        $('#GridView').data('kendoGrid').dataSource.read();
        $('#GridView').data('kendoGrid').refresh();
    }

    $("#btnAutoGet").bind("click", function() {
        showLoadingDialog();
        $.post("@Url.Action("DongBoLichThucHanh", "LichThucHanh")")
            .done(function(data) {
                hideLoadingDialog();
                if (data.Result == "OK") {
                    ShowNotification("Đã thêm <b>" + data.Message + "</b> buổi thực hành!", "info");
                    refreshData();
                } else
                    ShowNotification(data.Message, "error");

            });
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "Lỗi:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function onSelectedWeekChange() {
        var value = this.value(),
            grid = $("#GridView").data("kendoGrid");
        if (value && !isNaN(parseInt(value))) {
            grid.dataSource.filter({ field: "SttTuan", operator: "eq", value: parseInt(value) });
        } else {
            grid.dataSource.filter({});
        }
    }

</script>